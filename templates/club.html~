{% extends "base.html" %}

 {% block css %}
<link href="../../static/css/bootstrap.min.css" rel="stylesheet">
<link href="../../static/css/style.css" rel="stylesheet">

<script type="text/javascript" src="http://mbostock.github.com/d3/d3.js?2.1.3"></script>
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.geom.js?2.1.3"></script>
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.layout.js?2.1.3"></script>

<style type="text/css">

body {
text-align: center;
}

.content{
  padding-top:2vh;
}

input, select, textarea{
    color: #ff0000;
}

textarea:focus, input:focus {
    color: #ff0000;
}

.slice text {
font-size: 16pt;
font-family: Arial;
}


body {
text-align: center;
}

a:link {
    color: white;
}

a:visited {
    color: white;
}

.content{
  padding-top:2vh;
}

ul{
  list-style: none;
}

.card {
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    transition: 0.3s;
    width: 40%;
    border-radius: 5px;
background: white;
padding: 5px;
margin: auto;
color: green;
text-align: center;
}

.card:hover {
    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
}

</style>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="../static/js/announce.js"></script>
{% endblock %}

{% block content %}

<div class="content">

    <h1>{{clubName}}</h1>
    <h4>{{clubDesc}}</h4>
    <br><br>
{% if not admin %}
{% if not member %}
    <form action="/join/{{clubName}}/" method="POST">
      <input  type="submit" class="btn btn-success" name="join" value="Join Club">
    </form>
{% endif %}
{% endif %}
<hr>
    <h1>Announcements</h1>


<div class="container">
      
    {% for msg in announcements %}

<div class="row">
<div class="card">
  
    <h5>{{msg}}</h5> 
  </div>
</div>
<br>
    {% endfor %}
      </div>
{% if admin %}
<br><br><Br><br>
      <p>Add a new announcement</p>
      <form action="/announce/{{clubName}}/" method="POST">
	<input type="text" name="announce">
	<input  type="submit" class="btn btn-success" name="submit" value="Submit">
      </form>
{% endif %}
<hr>

    <h1>Attendance</h1>

    {% if admin %}    
    <div class="row">
      <div class="col-sm-4">Total Days: {{totaldays}}</div>
      <form action="/inc-total/{{clubName}}/" method="POST">
        <input  type="submit" class="btn btn-success" name="increment" value="Increment">
      </form>
    </div>
    <div class="row">
    {% for person in members %}
      <div class="col-sm-4">{{person}}</div>
      <form action="/inc-attendance/{{clubName}}/{{person}}/" method="POST">
	<input  type="submit" class="btn btn-success" name="checkin" value="Check In">
      </form>
    {% endfor %}
    </div>
    {% endif %}

     
<script src="https://d3js.org/d3.v4.min.js"></script>
<h2>Your Attendance</h2>
<script type="text/javascript">

    var w = 500,                        //width
    h = 400,                            //height
    r = 100,                            //radius
    color = d3.scale.category20c();     //builtin range of colors

    data = [{"label":"present", "value":{{present}}}, 
            {"label":"absent", "value":{{absent}}}];
    
    var vis = d3.select("body")
        .append("svg:svg")              //create the SVG element inside the <body>
        .data([data])                   //associate our data with the document
            .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
            .attr("height", h)
        .append("svg:g")                //make a group to hold our pie chart
            .attr("transform", "translate(" + w/2 + "," + h/2 + ")")    //move the center of the pie chart from 0, 0 to radius, radius

    var arc = d3.svg.arc().outerRadius(r);

    var pie = d3.layout.pie().value(function(d) { return d.value+1; });    //we must tell it out to access the value of each element in our data array

    var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
        .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties) 
        .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
            .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
                .attr("class", "slice");    //allow us to style things in the slices (like text)

        arcs.append("svg:path")
                .attr("fill", function(d, i) { return color(i); } ) //set the color for each slice to be chosen from the color function defined above
                .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function

        /*arcs.append("svg:text")        //add a label to each slice
                .attr("transform", function(d) {                    //set the label's origin to the center of the arc
                //we have to make sure to set these before calling arc.centroid
                d.innerRadius = 0;
                d.outerRadius = r;
                return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
            })
            .attr("text-anchor", "middle")                          //center the text on it's origin
            .text(function(d, i) { return data[i].label + ": "+data[i].value; });        //get the label from our original data array*/
        arcs.append("svg:text")
          .attr("transform", function(d) {
              d.innerRadius = 0;
              d.outerRadius = r;
              var cent = arc.centroid(d),
                  x = cent[0],
                  y = cent[1],
                  h = Math.sqrt(x*x + y*y);       //use pythagorean theorem to find hypotenuse
              return "translate(" + (x/h * (r + 30)) +  ',' +
                 (y/h * (r + 30)) +  ")"; 
          })
          .attr("dy", ".35em")
          .attr("text-anchor", function(d) {
              return (d.endAngle + d.startAngle)/2 > Math.PI ?        //determines which side it should start on, depending on if it's past the center
                  "end" : "start";
          })
          .text(function(d, i) { return data[i].label + ": "+data[i].value; });
        
    </script>





</div>

{% endblock %}
